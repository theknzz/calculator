{"version":3,"sources":["logic/operate.js","components/Display.js","components/Button.js","components/ButtonWrapper.js","store/actions/mathAction.js","components/Calculator.js","App.js","serviceWorker.js","logic/calculate.js","store/reducers/rootReducer.js","index.js"],"names":["operate","leftNr","operator","rightNr","eval","Container","styled","div","Wrapper","Display","value","string","number","button","props","isLarge","isSpecial","isDisabled","Button","onClick","e","Row","ButtonWrapper","handleClick","state","disable","equalDisable","result","updateOperation","btnName","type","content","connect","dispatch","update","App","Boolean","window","location","hostname","match","calculate","isNaN","operation","nr","parseInt","toString","equals","length","initialState","rootReducer","action","aux","console","log","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kJAAA,IAAMA,QAAU,SAAVA,QAAWC,OAAQC,SAAUC,SAC/B,OAAOC,KAAKH,OAAOC,SAASC,UAGjBH,+B,0sBCDf,IAAMK,EAAYC,IAAOC,IAAV,KAWTC,EAAUF,IAAOC,IAAV,KAkBEE,EAVC,SAAC,GAAiB,IAAdC,EAAa,EAAbA,MAChB,OACI,kBAACL,EAAD,KACI,kBAACG,EAAD,KACKE,EAAMC,OAASD,EAAMC,OAAUD,EAAME,OAASF,EAAME,OAAS,K,0cCvB9E,IAAMP,EAAYC,IAAOO,OAAV,KAGC,SAAAC,GAAK,OAAIA,EAAMC,QAAU,MAAQ,SAQ3C,SAAAD,GAAK,OAAIA,EAAME,UAAY,4BAA8B,+BAIzD,SAAAF,GAAK,OAAIA,EAAMG,WAAa,yCAA2C,yCAiB9DC,EAdA,SAAC,GAAyD,IAAvDR,EAAsD,EAAtDA,MAAOK,EAA+C,EAA/CA,QAASI,EAAsC,EAAtCA,QAASH,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,WAOlD,OACI,kBAAC,EAAD,CAAWA,WAAYA,EAAYD,UAAWA,EAAWD,QAASA,EAASI,QAN3D,SAACC,GACjBD,EAAQT,IAKyFA,MAAOA,GACnGA,I,qRC1Bb,IAAML,EAAYC,IAAOC,IAAV,KAOTc,EAAMf,IAAOC,IAAV,KA2CMe,EAtCO,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,MAC5BC,EAA2B,KAAjBD,EAAMZ,OAChBc,EAAgC,KAAjBF,EAAMZ,QAAkC,KAAjBY,EAAMG,OAClD,OACI,kBAAC,EAAD,KACI,kBAACN,EAAD,KACI,kBAAC,EAAD,CAAQF,QAASI,EAAab,MAAO,OACrC,kBAAC,EAAD,CAAQS,QAASI,EAAab,MAAO,QACrC,kBAAC,EAAD,CAAQS,QAASI,EAAab,MAAO,IAAKO,WAAYQ,IACtD,kBAAC,EAAD,CAAQN,QAASI,EAAab,MAAO,IAAKM,WAAW,EAAMC,WAAYQ,KAE3E,kBAACJ,EAAD,KACI,kBAAC,EAAD,CAAQF,QAASI,EAAab,MAAO,MACrC,kBAAC,EAAD,CAAQS,QAASI,EAAab,MAAO,MACrC,kBAAC,EAAD,CAAQS,QAASI,EAAab,MAAO,MACrC,kBAAC,EAAD,CAAQS,QAASI,EAAab,MAAO,IAAKM,WAAW,EAAMC,WAAYQ,KAE3E,kBAACJ,EAAD,KACI,kBAAC,EAAD,CAAQF,QAASI,EAAab,MAAO,MACrC,kBAAC,EAAD,CAAQS,QAASI,EAAab,MAAO,MACrC,kBAAC,EAAD,CAAQS,QAASI,EAAab,MAAO,MACrC,kBAAC,EAAD,CAAQS,QAASI,EAAab,MAAO,IAAKM,WAAW,EAAMC,WAAYQ,KAE3E,kBAACJ,EAAD,KACI,kBAAC,EAAD,CAAQF,QAASI,EAAab,MAAO,MACrC,kBAAC,EAAD,CAAQS,QAASI,EAAab,MAAO,MACrC,kBAAC,EAAD,CAAQS,QAASI,EAAab,MAAO,MACrC,kBAAC,EAAD,CAAQS,QAASI,EAAab,MAAO,IAAKM,WAAW,EAAMC,WAAYQ,KAE3E,kBAACJ,EAAD,KACI,kBAAC,EAAD,CAAQF,QAASI,EAAab,MAAO,IAAKK,SAAS,IACnD,kBAAC,EAAD,CAAQI,QAASI,EAAab,MAAO,MACrC,kBAAC,EAAD,CAAQS,QAASI,EAAab,MAAO,IAAKM,WAAW,EAAMC,WAAYS,OCzCxEE,EAPS,SAACC,GACrB,MAAO,CACHC,KAAM,YACNC,QAASF,I,4VCKjB,IAAMxB,EAAYC,IAAOC,IAAV,KAQTC,EAAUF,IAAOC,IAAV,KAoCEyB,eANS,SAACR,GACrB,MAAO,CACHG,OAAQH,MARW,SAACS,GACxB,MAAO,CACHC,OAAQ,SAACL,GAAD,OAAaI,EAASL,EAAgBC,QAUvCG,EA9BI,SAAC,GAA0B,IAAvBE,EAAsB,EAAtBA,OAAQP,EAAc,EAAdA,OAM3B,OACI,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAASjB,MAAOiB,KAEpB,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAeH,MAAOG,EAAQJ,YAVtB,SAAEM,GAClBK,EAAOL,WChBAM,MANf,WACE,OACI,kBAAC,EAAD,OCOcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0BCyDSC,EAzEG,SAACjB,EAAOK,GAEtB,GAAIa,MAAMb,IAAwB,MAAZA,EAAiB,CAEnC,GAAgB,OAAZA,EACA,MAAO,CACHjB,OAAQ,GACR+B,UAAW,GACXhB,OAAQ,GACRhB,OAAQ,IAGhB,GAAgB,QAAZkB,GAAsC,KAAjBL,EAAMZ,OAAe,CAC1C,IAAIgC,EAAKC,SAASrB,EAAMZ,QAexB,OAdAgC,IAAO,EAEU,KAAjBpB,EAAMG,OACC,2BACIH,GADJ,IAECZ,OAAQgC,EAAGE,WACXnC,OAAQiC,EAAGE,aAGZ,2BACItB,GADJ,IAECZ,OAAQgC,EAAGE,WACXnC,OAAQa,EAAMG,OAAS,IAAMH,EAAMmB,UAAY,IAAMC,EAAGE,aAKpE,GAAqB,KAAjBtB,EAAMG,QAAkC,KAAjBH,EAAMZ,OAAe,CAC5C,IAAMmC,EAAS/C,YAAQwB,EAAMG,OAAQH,EAAMmB,UAAWnB,EAAMZ,QAAQkC,WACpE,OAAO,2BACAtB,GADP,IAEIG,OAAQoB,EACRpC,OAAQoC,EACRJ,UAAuB,MAAZd,EAAiB,GAAKA,EACjCjB,OAAQ,KAIhB,MAAwB,KAApBY,EAAMmB,UAAyB,2BAC5BnB,GADqB,IAExBmB,UAAWd,IAEXL,EAAMb,OAAOqC,OAAS,EAEf,CACHL,UAAWd,EACXF,OAAQH,EAAMZ,OACdD,OAAQa,EAAMb,OAAO,IAAIkB,EACzBjB,OAAQ,IAETY,EAIP,MAAwB,KAApBA,EAAMmB,UACC,2BACAnB,GADP,IAEIZ,OAAQY,EAAMZ,OAAOiB,EACrBlB,OAAQa,EAAMZ,OAAOiB,IAGzB,2BACOL,GADP,IAEIZ,OAAQY,EAAMZ,OAAOiB,EACrBlB,OAAQa,EAAMG,OAAO,IAAIH,EAAMmB,UAAU,IAAInB,EAAMZ,OAAOiB,KCpEpEoB,EAAe,CACjBrC,OAAQ,GACR+B,UAAW,GACXhB,OAAQ,GACRhB,OAAQ,IAYGuC,EATK,WAAmC,IAAlC1B,EAAiC,uDAAzByB,EAAcE,EAAW,uCAClD,GAAoB,cAAhBA,EAAOrB,KAAsB,CAC7B,IAAMsB,EAAKX,EAAUjB,EAAO2B,EAAOpB,SAEnC,OADAsB,QAAQC,IAAIF,GACLA,EAEX,OAAO5B,GCNL+B,EAAQC,YAAYN,GAE1BO,IAASC,OACL,kBAAC,IAAD,CAAUH,MAAOA,GACf,kBAAC,IAAMI,WAAP,KACE,kBAAC,EAAD,QAGNC,SAASC,eAAe,SHkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhB,QAAQgB,MAAMA,EAAMC,c","file":"static/js/main.7baeef63.chunk.js","sourcesContent":["const operate = (leftNr, operator, rightNr) => {\n    return eval(leftNr+operator+rightNr);\n}\n\nexport default operate;","import React from 'react'\nimport styled from \"@emotion/styled\";\n\nconst Container = styled.div`\n    display: flex;\n    justify-content: flex-end;\n    width: 60%;\n    background-color: #636B61;\n    border-radius: 10px;\n    -webkit-box-shadow: 10px 10px 26px -8px rgba(0,0,0,0.48);\n    -moz-box-shadow: 10px 10px 26px -8px rgba(0,0,0,0.48);\n    box-shadow: 10px 10px 26px -8px rgba(0,0,0,0.48);\n`\n\nconst Wrapper = styled.div`\n    flex: 0 0 auto;\n    font-size: 70px;\n    padding: 20px;\n    font-weight: bold;\n    color: white;\n`\n\nconst Display = ( { value } ) => {\n    return (\n        <Container>\n            <Wrapper>\n                {value.string ? value.string : (value.number ? value.number : 0)}\n            </Wrapper>\n        </Container>\n    );\n}\n\nexport default Display","import React from 'react'\nimport styled from '@emotion/styled'\n\nconst Container = styled.button`\n    font-size: 50px;\n    padding: 30px;\n    flex: 1 1 ${props => props.isLarge ? '50%' : '25%'};\n    border-radius: 10px;\n    border: none;\n    margin: 3px;\n    -webkit-box-shadow: 10px 10px 26px -8px rgba(0,0,0,0.48);\n    -moz-box-shadow: 10px 10px 26px -8px rgba(0,0,0,0.48);\n    box-shadow: 10px 10px 26px -8px rgba(0,0,0,0.48);\n    color: white;\n    ${props => props.isSpecial ? 'background-color: #AFA2FF' : 'background-color: #E3D7FF'};\n    : focus {\n        outline: none;\n    }\n    ${props => props.isDisabled ? 'opacity: 0.25;pointerEvents: disabled;' : 'opacity: 1; pointerEvents: initial;'}\n`\n\nconst Button = ({ value, isLarge, onClick, isSpecial, isDisabled } ) => {\n\n    const handleClick = (e) => {\n        onClick(value);\n\n    }\n\n    return (\n        <Container isDisabled={isDisabled} isSpecial={isSpecial} isLarge={isLarge} onClick={handleClick} value={value}>\n            {value}\n        </Container>\n    );\n}\n\nexport default Button","import React from 'react'\nimport styled from '@emotion/styled'\nimport Button from './Button'\n\nconst Container = styled.div`\n    display: flex;\n    width: 60%;\n    flex: 0 1 auto;\n    flex-flow: column wrap;\n`\n\nconst Row = styled.div`\n    display: flex;\n    flex-flow: row nowrap;\n`\n\nconst ButtonWrapper = ({ handleClick, state }) => {\n    const disable = state.number === '';\n    const equalDisable = state.number === '' || state.result === '';\n    return (\n        <Container>\n            <Row>\n                <Button onClick={handleClick} value={'AC'} />\n                <Button onClick={handleClick} value={'+/-'}/>\n                <Button onClick={handleClick} value={'%'} isDisabled={disable}/>\n                <Button onClick={handleClick} value={'/'} isSpecial={true} isDisabled={disable}/>\n            </Row>\n            <Row>\n                <Button onClick={handleClick} value={'7'}/>\n                <Button onClick={handleClick} value={'8'}/>\n                <Button onClick={handleClick} value={'9'}/>\n                <Button onClick={handleClick} value={'*'} isSpecial={true} isDisabled={disable}/>\n            </Row>\n            <Row>\n                <Button onClick={handleClick} value={'4'}/>\n                <Button onClick={handleClick} value={'5'}/>\n                <Button onClick={handleClick} value={'6'}/>\n                <Button onClick={handleClick} value={'-'} isSpecial={true} isDisabled={disable}/>\n            </Row>\n            <Row>\n                <Button onClick={handleClick} value={'1'}/>\n                <Button onClick={handleClick} value={'2'}/>\n                <Button onClick={handleClick} value={'3'}/>\n                <Button onClick={handleClick} value={'+'} isSpecial={true} isDisabled={disable}/>\n            </Row>\n            <Row>\n                <Button onClick={handleClick} value={'0'} isLarge={true}/>\n                <Button onClick={handleClick} value={'.'}/>\n                <Button onClick={handleClick} value={'='} isSpecial={true} isDisabled={equalDisable}/>\n            </Row>\n        </Container>\n    );\n}\n\nexport default ButtonWrapper;","const updateOperation = (btnName) => {\n    return {\n        type: 'CALCULATE',\n        content: btnName,\n    }\n}\n\nexport default updateOperation\n","import React, { useState } from 'react'\nimport styled from \"@emotion/styled\";\nimport { connect } from 'react-redux'\n\nimport Display from \"./Display\";\nimport ButtonWrapper from \"./ButtonWrapper\";\nimport updateOperation from '../store/actions/mathAction'\n\nconst Container = styled.div`\n    display: flex;\n    flex-flow: column;\n    width: 100%;\n    align-items: center;\n    margin-top: 70px;\n`\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-flow = row wrap;\n    justify-content: center;\n    width: 100%;\n`\nconst Calculator = ( { update, result } ) => {\n\n    const handleClick = ( btnName ) => {\n        update(btnName)\n    }\n\n    return (\n        <Container>\n            <Wrapper>\n                <Display value={result}/>\n            </Wrapper>\n            <Wrapper>\n                <ButtonWrapper state={result} handleClick={handleClick}/>\n            </Wrapper>\n        </Container>\n    );\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        update: (btnName) => dispatch(updateOperation(btnName))\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        result: state,\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Calculator)","import React from 'react';\nimport Calculator from \"./components/Calculator\";\n\nfunction App() {\n  return (\n      <Calculator />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import operate from './operate'\n\nconst calculate = (state, btnName) => {\n    // if the btn pressed is a operator\n    if (isNaN(btnName) && btnName !== '.') {\n        // clear the state\n        if (btnName === 'AC')\n            return {\n                number: '',\n                operation: '',\n                result: '',\n                string: '',\n            }\n\n        if (btnName === '+/-' && state.number !== '') {\n            let nr = parseInt(state.number);\n            nr *= -1;\n            let obj;\n            state.result === '' ?\n                obj = {\n                    ...state,\n                    number: nr.toString(),\n                    string: nr.toString(),\n                }\n            :\n                obj = {\n                    ...state,\n                    number: nr.toString(),\n                    string: state.result + ' ' + state.operation + ' ' + nr.toString(),\n                }\n            return obj;\n        }\n        // update the state.result with the result of the pretended operation\n        if (state.result !== '' && state.number !== '') {\n            const equals = operate(state.result, state.operation, state.number).toString();\n            return {\n                ...state,\n                result: equals,\n                string: equals,\n                operation: btnName === '='? '' : btnName,\n                number: '',\n            }\n        }\n        // if the user is trying to break the calculator lol\n        if (state.operation !== '') return {\n            ...state,\n            operation: btnName,\n        };\n        if (state.string.length > 0)\n            // update the result to the first number so the state.number is clear to store the next number\n            return {\n                operation: btnName,\n                result: state.number,\n                string: state.string+' '+btnName,\n                number: '',\n            };\n        return state;\n    }\n    // is the button clicked is a number\n    else {\n        if (state.operation === '')\n            return {\n                ...state,\n                number: state.number+btnName,\n                string: state.number+btnName,\n            };\n        else\n            return {\n                ...state,\n                number: state.number+btnName,\n                string: state.result+' '+state.operation+' '+state.number+btnName,\n            }\n    }\n}\n\nexport default calculate","import calculate from \"../../logic/calculate\";\n\nconst initialState = {\n    number: '',\n    operation: '',\n    result: '',\n    string: '',\n};\n\nconst rootReducer = (state = initialState, action) => {\n    if (action.type === 'CALCULATE') {\n        const aux =calculate(state, action.content);\n        console.log(aux)\n        return aux;\n    }\n    return state;\n}\n\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux'\nimport rootReducer from './store/reducers/rootReducer'\n\nconst store = createStore(rootReducer)\n\nReactDOM.render(\n    <Provider store={store}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}